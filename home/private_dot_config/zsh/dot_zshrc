# This file is sourced only for interactive shells.
# It should contain commands to set up aliases, fun
# -ctions, options, key bindings, etc:
# See /usr/share/zsh/help

# Compile '.zshrc' to speed up loading. {{{
if [[ ! -f "${ZDOTDIR}/.zshrc.zwc" ]] || [[ $(readlink "${ZDOTDIR}/.zshrc") -nt "${ZDOTDIR}/.zshrc.zwc" ]]; then
  zcompile "${ZDOTDIR}/.zshrc.zwc" "${ZDOTDIR}/.zshrc"
fi
#}}}

# in ~/.zshenv, executed `unsetopt global_rcs` and ignored /etc/zshrc
if [ -r /etc/zshrc ]; then
  source /etc/zshrc
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Build-in Function Settings {{{
# TODO: adjustment
# + Autoload {{{
autoload -Uz colors && colors
autoload -Uz is-at-least
if is-at-least 4.3.10; then
  autoload -Uz vcs_info
  autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
fi

# completion
autoload -Uz compinit && compinit

# Can execute man with the Esc-h
if (( ${+aliases[run-help]} )); then
  unalias run-help
fi
autoload -Uz run-help
autoload -Uz run-help-git
autoload -Uz run-help-svn
# + }}}

# + Options {{{
# ++ Changing Directories {{{
# Omit cd.
setopt auto_cd

# Add cd directory to directories stack.
# For example, 'cd - [tab]' allows you to jump to a directories in the past.
setopt auto_pushd

# Omit '~'.
setopt cdable_vars

# Don't puhf the same directory onto the directories stack.
setopt pushd_ignore_dups
# ++ }}}

# ++ Completion {{{
# Don't change the position of prompt when completing.
setopt always_last_prompt

# Move the cursor to the end after complete completion.
setopt always_to_end

# Automatically list choices on an ambiguous completion.
setopt auto_list

# Toggle completion candidate by tab.
setopt auto_menu

# Complement variable name and correspondence of parentheses.
setopt auto_param_keys

# If a parameter is completed whose content is the name of a directory, then add a trailing slash instead of a space.
setopt auto_param_slash

# Remove slash added a trailing by auto_param_slash.
setopt auto_remove_slash

# Expand aliases and complement it.
setopt complete_aliases

# Complement even if the cursor is in the middle of word.
unsetopt complete_in_word

# Don't beep on an ambiguous completion.
unsetopt list_beep

# Try to make the completion list smaller.
setopt list_packed

# Show the type of each file with a trailing identifying mark.
setopt list_types

# If can completion the continuation of a word, it isn't accepted yet.
unsetopt rec_exact
# ++ }}}

# ++ Expansion and Globbing {{{
# For example, Can make folders 1, 2, 3 by 'mkdir {1-3}'.
setopt brace_ccl

# Use additional characters for globs.
setopt extended_glob

# Don't require a leading '.' in a filename to be matched explicit.
setopt glob_dots

# Substitutions using the :s and :& history modifiers are performed with pattern matching instead of string matching.
setopt hist_subst_pattern

# Allows the completion after '=' in the option.
setopt magic_equal_subst

# If directory matches by expanding file name, appends / to the end.
setopt mark_dirs

# Suppress glob warning.
unsetopt nomatch

# Expand arrays included in expansion separately.
setopt rc_expand_param
# ++ }}}

# ++ History {{{
# Save each command’s beginning timestamp and the duration to the history file
setopt extended_history

# if conflict occurred, delete the old one.
setopt hist_ignore_all_dups

# Erase extra blanks.
setopt hist_ignore_dups

# If there is a space at the beginning, don't record history.
setopt hist_ignore_space

# Remove the history command from the history list when invoked.
setopt hist_no_store

# Stuff the extra spaces and record.
setopt hist_reduce_blanks

# Share the history among zsh's started at the same time.
setopt share_history
# ++ }}}

# ++ Input/Output {{{
# Expand aliases.
setopt aliases

# Don't overwrite with redirect.
setopt clobber

# Try to correct the spelling of commands.
setopt correct

# Don't use 'C-q' and 'C-s'.
setopt no_flow_control

# Do not exit on end-of-file.
setopt ignore_eof

# Print a warning message if a mail file has been accessed since the shell last checked.
setopt mail_warning

# Perform a path search even on command names with slashes in them.
setopt path_dirs

# Japanese file name can be displayed.
setopt print_eight_bit

# If querying the user before executing 'rm *' or 'rm path/*', first wait ten seconds and ignore anything typed in that time.
setopt RM_STAR_WAIT
# ++ }}}

# ++ Job Control {{{
# If you enter a command with the same name as the suspended process, execute it.
setopt auto_resume

# List jobs in the long format by default.
setopt long_list_jobs
# ++ }}}

# ++ Prompting {{{
# Even if there isn't line feed code at the end of the output string, it is displayed.
unsetopt prompt_cr

# Evaluate PROMPT variable expansion, command substitution, arithmetic operation etc for each display.
setopt prompt_subst

# Delete the right prompt after executing the command.
setopt transient_rprompt
# ++ }}}

# ++ Scripts and Functions {{{
# Handle to multiple redirects and pipes.
setopt multios
# ++ }}}

# ++ Zsh Line Editor {{{
# Don't sound a beep.
unsetopt beep

# Emacs like key bind.
setopt emacs
#setopt vi

# Use ZLE.
setopt zle
# ++ }}}
# + }}}

# TODO: adjustment
# + Typeset {{{
# An array to note missing features to ease diagnosis in case of problems
typeset -ga debian_missing_features

# Avoid duplication of ${PATH}
typeset -U path cdpath fpath manpath
# + }}}

# TODO: adjustment
# + Zstyle (The zsh/zutil Module Settings) {{{
# ++ 'cdr' settings (Required before 'zplug load') {{{
if [[ ! -d "${XDG_CACHE_HOME}/zsh" ]]; then
  mkdir -p "${XDG_CACHE_HOME}/zsh"
fi
if is-at-least 4.3.10; then
  add-zsh-hook chpwd chpwd_recent_dirs
  zstyle ':chpwd:*' recent-dirs-max 500
  zstyle ':chpwd:*' recent-dirs-default true
  zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME}/zsh/chpwd-recent-dirs"
  zstyle ':chpwd:*' recent-dirs-pushd true
fi
# ++ }}}

# TODO: English commentary
# ++ Completion Settings {{{
# 補完侯補をメニューから選択
# select=2: 補完候補を一覧から選択, 補完候補が2つ以上なければすぐに補完
zstyle ':completion:*' menu select=2

# 補完時に, 文字の大小を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# ~/f を /home/usr/foo ではなく ~/foo に補完
zstyle ':completion:*' keep-prefix

#zstyle ':completion:*' recent-dirs-insert ???

### 補完候補
### _oldlist 前回の補完結果を再利用する。
### _complete: 補完する。
### _match: globを展開しないで候補の一覧から補完する。
### _history: ヒストリのコマンドも補完候補とする。
### _ignored: 補完候補にださないと指定したものも補完候補とする。
### _approximate: 似ている補完候補も補完候補とする。
### _prefix: カーソル以降を無視してカーソル位置までで補完する。
zstyle ':completion:*' completer _complete _ignored _prefix

# 補完候補に着色
if [[ -n "${LS_COLORS}" ]]; then
  zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
fi

# カレントディレクトリを非表示
zstyle ':completion:*:cd:*' ignore-parents parent pwd

# オブジェクトファイルとか中間ファイルとか非表示
zstyle ':completion:*:*files' ignored-patterns '*?.o' '*?~' '*\#'

  # sudo でも補完の対象
zstyle ':completion:*:sudo:*' command-path \
  "/usr/local/sbin" \
  "/usr/local/bin"  \
  "/usr/sbin"       \
  "/usr/bin"        \
  "/sbin"           \
  "/bin"            \
  "/usr/X11R6/bin"

# 補完候補をキャッシュ
zstyle ':completion:*' use-cache true #yes?
zstyle ':completion:*' cache-path "${XDG_CACHE_HOME}/zsh/zcompcache"

# 詳細情報を非表示
zstyle ':completion:*' verbose no

# 補完フォーマット
zstyle ':completion:*:descriptions' format '%BCompleting%b %U%d%u'
zstyle ':completion:*' group-name ''

# セパレータ
zstyle ':completion:*' list-separator '-->'
# ++ }}}
# + }}}

# TODO: addition
# + Aliases {{{
alias less='less -MN'

# global
alias -g ...='cd ../..'
alias -g ....='cd ../../..'
alias -g .....='cd ../../../..'
alias -g @g='| grep'
alias -g @l='| less'
alias -g @h='| head'
alias -g @t='| tail'
alias -g @s='| sed'
alias -g @c='| cat'
alias -g @f='| fzf'

# suffix
alias -s py=python
alias -s hs=runhaskell
alias -s {png,jpg,bmp,PNG,JPG,BMP}=eog
alias -s {mp3,frac}=audacious
alias -s {html,htm,md}=firefox
function extract() {
  case $1 in
    *.tar.gz|*.tgz) tar xzvf $1;;
    *.tar.xz) tar Jxvf $1;;
    *.zip) unzip $1;;
    *.lzh) lha e $1;;
    *.tar.bz2|*.tbz) tar xjvf $1;;
    *.tar.Z) tar zxvf $1;;
    *.gz) gzip -d $1;;
    *.bz2) bzip2 -dc $1;;
    *.Z) uncompress $1;;
    *.tar) tar xvf $1;;
    *.arj) unarj $1;;
  esac
  return 0
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz}=extract

# Don't write to history
alias run-help=' run-help'
alias man=' man'

# Enable aliases when 'sudo'
alias sudo='sudo '

# Enable color support of ls and also add handy aliases
alias ls='ls -F --color=auto'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# some more ls aliases
alias l='ls -CF'
alias ll='ls -alF'
alias la='ls -A'
alias lh='ls -lh'
alias t='tree'

# rm aliases
alias rm='rm -i -v'
if type trash-put &> "/dev/null"; then
  alias tp='trash-put'
fi

# other aliases
alias df='df -h'
alias du='du -hs'
if [[ "$(uname)" == "Linux" ]]; then
  alias ps='ps --sort=start_time'
fi
alias x='exit'
alias g='git'
compdef g=git
alias d='docker'
compdef d=docker

if [[ -f "/usr/local/bin/vim" ]]; then
  alias ov="/usr/local/bin/vim"  # own vim
elif type trash-put &> "/dev/null"; then
  alias ov="/usr/bin/vim"  # original vim
fi
alias vim='nvim'
alias vi='nvim'
alias v='nvim'
alias n='nvim'
alias clip='xsel --clipboard --input'
alias relogin='exec ${SHELL} -l'
# + }}}

# + Named Directories {{{
function name_dir()
{
  local dir=$1
  local name=$2

  if [[ -d "${dir}" ]]; then
    hash -d ${name}=${dir}
    return 0
  else
    return 1
  fi
  return 0
}

name_dir "$XDG_DATA_HOME/chezmoi" dotfiles
name_dir "${ZDOTDIR}/" .zsh
name_dir "${HOME}/.vim/" .vim

unfunction name_dir
# + }}}

# TODO: addition
# + Keybind {{{
# Emacs like keybind
bindkey -e

# History search
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward
if is-at-least 4.3.10; then
  bindkey '^R' history-incremental-pattern-search-backward
  bindkey '^S' history-incremental-pattern-search-forward
fi
# + }}}

# TODO: addition
# + Functions {{{
# + }}}
# }}}

# Plugin Settings {{{
eval "$(sheldon source)"
# }}}

# Applications Settings {{{
# + fzf {{{
export FZF_DEFAULT_OPTS='
--multi --layout=reverse --border --info=inline
--prompt="> " --pointer="◆" --marker="* " --exit-0 --select-1
'

# fzf color scheme
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
  --color=fg:#c0caf5,fg+:#a9b1d6,bg:#1a1b26,bg+:#15161e
  --color=hl:#7aa2f7,hl+:#5fd7ff,info:#bb9af7,marker:#e0af68
  --color=prompt:#c0caf5,spinner:#9ece6a,pointer:#f7768e,header:#bb9af7
  --color=border:#414868,label:#c0caf5,query:#7aa2f7
'
if [[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ]]; then
  source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh
fi

# ++ fzf's Functions {{{
# +++ fv - fuzzy open with vim from anywhere {{{
fv() {
  local file

  file="$(fzf)"
  if [[ -n "${file}" ]]; then
    vim "${file}"
  fi
}
# +++ }}}

# +++ vg - fuzzy grep open via rg {{{
vg() {
  local file

  # ripgrep - https://github.com/BurntSushi/ripgrep
  file="$(rg --no-heading --line-number $@ | fzf -0 -1 | awk -F: '{print $1 " +" $2}')"

  if [[ -n "${file}" ]]; then
    eval vim ${file}
  fi
}
# +++ }}}

# https://github.com/junegunn/fzf/wiki/Examples#git
# +++ fbr - checkout git branch {{{
fbr() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
    branch=$(echo "$branches" | fzf +m) &&
    git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}
# +++ }}}

# +++ flog - git commit browser {{{
fshow() {
  git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
    --bind "ctrl-m:execute:
  (grep -o '[a-f0-9]\{7\}' | head -1 |
    xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
  {}
  FZF-EOF"
}
# +++ }}}
# ++ }}}
# + }}}
# + activate mise {{{
if type mise &>/dev/null; then
  eval "$(mise activate zsh --shims)"
  export MISE_CACHE_DIR="${XDG_CACHE_HOME}/mise"
fi
# + }}}
# }}}

# Local Settings {{{
if [[ -f "${ZDOTDIR}/.zshrc.local" ]]; then
  source "${ZDOTDIR}/.zshrc.local"
fi
# }}}

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
[[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh

## Profiling zsh shell scripts
#if (which zprof > "/dev/null" 2>&1) ;then
#  zprof
#fi

# vim: fdm=marker fdc=3 fdl=0
