### TOML file format specification:
### https://github.com/toml-lang/toml

[[plugins]] # https://github.com/vim-jp/vimdoc-ja
repo = 'vim-jp/vimdoc-ja'

[[plugins]] # https://github.com/kana/vim-niceblock
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
    xmap I  <Plug>(niceblock-I)
    xmap A  <Plug>(niceblock-A)
'''

[[plugins]] # https://github.com/tyru/open-browser.vim
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-smart-search)'
on_cmd = 'OpenBrowser'
hook_add = '''
    if has('unix')
        let g:openbrowser_browser_commands = [
                    \   {
                    \       "name": "google-chrome",
                    \       "args": ["{browser}", "{uri}"]
                    \   }
                    \ ]
    endif
    let g:netrw_nogx = 1 " disable netrw's gx mapping.
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]] # https://github.com/kannokanno/previm
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
hook_add = '''
    nnoremap <Leader>o :<C-u>PrevimOpen<CR>
'''

[[plugins]] # https://github.com/rhysd/vim-gfm-syntax
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

[[plugins]] # https://github.com/thinca/vim-qfreplace
repo = 'thinca/vim-qfreplace'
on_ft = 'qf'
[plugins.ftplugin]
qf = '''
    nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''

[[plugins]] # https://github.com/kana/vim-textobj-user
repo = 'kana/vim-textobj-user'
on_event = ['VimEnter']

[[plugins]] # https://github.com/kana/vim-operator-user
repo = 'kana/vim-operator-user'

[[plugins]] # https://github.com/kana/vim-operator-replace
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
    map R <Plug>(operator-replace)
'''

# Dark Power {{{

[[plugins]] # https://github.com/Shougo/neoyank.vim
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]] # https://github.com/Shougo/echodoc.vim
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
    let g:echodoc#type = 'virtual'
    call echodoc#enable()
'''

[[plugins]] # https://github.com/Shougo/defx.nvim
repo = 'Shougo/defx.nvim'
on_if = 'has("nvim")'
on_cmd = 'Defx'
hook_add = '''
    nnoremap <silent>   [Space]f
                \ :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
    call defx#custom#column(
                \ 'mark', {
                \   'readonly_icon': '✗',
                \   'selected_icon': '✓',
                \ })
    call defx#custom#column(
                \ 'icon', {
                \   'directory_icon': '▸',
                \   'opened_icon': '▾',
                \   'root_icon': ' ',
                \ })
    call defx#custom#option('_', {
                \ 'columns': 'indent:git:icons:filename',
                \ 'show_ignored_files': 1,
                \ })
'''
[plugins.ftplugin]
defx = '''
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
    \ defx#async_action('drop')
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> !
    \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
    \ defx#async_action('open')
    nnoremap <silent><buffer><expr> E
    \ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
    \ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o
    \ defx#async_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> O
    \ defx#async_action('open_tree_recursive')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
    \ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
    \ defx#do_action('toggle_columns', 'mark:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
    \ defx#do_action('toggle_sort', 'Time')
    nnoremap <silent><buffer><expr> se
    \ defx#do_action('add_session')
    nnoremap <silent><buffer><expr> sl
    \ defx#do_action('load_session')
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove_trash')
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> >
    \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> h
    \ defx#async_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
    \ defx#async_action('cd')
    nnoremap <silent><buffer><expr> \
    \ defx#do_action('cd', getcwd())
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
    \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
    \ defx#do_action('redraw')
    xnoremap <silent><buffer><expr> <CR>
    \ defx#do_action('toggle_select_visual')
    nnoremap <silent><buffer><expr> <C-g>
    \ defx#do_action('print')
    nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
    \ ':<C-u>wincmd w<CR>' :
    \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''
zsh = '''
    imap <buffer> <C-c> <Plug>(deol_quit)
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'
depends = ['defx.nvim', 'vim-devicons']

[[plugins]]
repo ='kristijanhusak/defx-git'
depends = ['defx.nvim']
hook_source = '''
    call defx#custom#column('git', 'indicators', {
                \ 'Modified'  : '✹',
                \ 'Staged'    : '✚',
                \ 'Untracked' : '✭',
                \ 'Renamed'   : '➜',
                \ 'Unmerged'  : '═',
                \ 'Ignored'   : '☒',
                \ 'Deleted'   : '✖',
                \ 'Unknown'   : '?'
                \ })
'''

[[plugins]] # https://github.com/Shougo/neosnippet.vim
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif

    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1

    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory=g:dein#base_path.'/repos/github.com/honza/vim-snippets/snippets'
'''

[[plugins]] # https://github.com/Shougo/neosnippet-snippets
repo = 'Shougo/neosnippet-snippets'

[[plugins]] # https://github.com/honza/vim-snippets
repo = 'honza/vim-snippets'

[[plugins]] # https://github.com/Shougo/deoppet.nvim
repo = 'Shougo/deoppet.nvim'
on_if = 'has("nvim-0.5.0") && has("python3")'

[[plugins]] # https://github.com/Shougo/denite.nvim
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
on_if = 'has("nvim")'
hook_add = '''
"    nnoremap <silent> ;r
"                \ :<C-u>Denite -buffer-name=register
"                \ register neoyank<CR>
"    xnoremap <silent> ;r
"                \ :<C-u>Denite -default-action=replace -buffer-name=register
"                \ register neoyank<CR>
"    nnoremap <silent> [Window]<Space>
"                \ :<C-u>Denite file/rec:~/.vim/rc<CR>
"    nnoremap <expr> / line('$') > 10000 ? '/' :
"                \ ":\<C-u>Denite -buffer-name=search -start-filter line\<CR>"
"    nnoremap <expr> n line('$') > 10000 ? 'n' :
"                \ ":\<C-u>Denite -buffer-name=search -resume -refresh -no-start-filter\<CR>"
"    nnoremap <expr> * line('$') > 10000 ? '*' :
"                \ ":\<C-u>DeniteCursorWord -buffer-name=search line\<CR>"
"    nnoremap <silent> [Window]s :<C-u>Denite file/point file/old
"                \ -sorters=sorter/rank
"                \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
"                \ file file:new<CR>
"    nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
"                \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
"                \  tag:include\<CR>"
"    nnoremap <silent><expr> tp  &filetype == 'help' ?
"                \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"
"    nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
"    nnoremap <silent> [Window]g :<C-u>Denite ghq -default-action=cd<CR>
"    nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
"                \ -no-empty grep<CR>
"    nnoremap <silent> ft :<C-u>Denite filetype<CR>
"    nnoremap <silent> <C-t> :<C-u>Denite -buffer-name=deol -split=floating
"                \ -cursor-pos=`tabpagenr()-1` deol:zsh<CR>
"    nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>
"    nnoremap <silent> <C-h> :<C-u>DeniteCursorWord help<CR>
"    nnoremap <silent> ;;
"                \ :<C-u>Denite command command_history<CR>
'''
[plugins.ftplugin]
denite = '''
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> a
    \ denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> '
    \ denite#do_map('quick_move')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> r
    \ denite#do_map('do_action', 'quickfix')
    nnoremap <silent><buffer><expr> <C-r>
    \ denite#do_map('restore_sources')
'''

[[plugins]] # https://github.com/Shougo/deol.nvim
repo = 'Shougo/deol.nvim'
on_source = 'denite.nvim'
on_if = 'has("nvim") || has("terminal")'
hook_add = '''
    nnoremap <silent> [Space]s :<C-u>Deol zsh -no-start-insert<CR>
    nnoremap <silent> [Space]n :<C-u>call deol#new(
                \ {'command': 'zsh', 'start_insert': 0})<CR>
    " nnoremap <silent> [Space]s :<C-u>Deol xonsh<CR>
    nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''

[[plugins]] # https://github.com/Shougo/junkfile.vim
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> [Window]e :<C-u>Denite junkfile:new junkfile<CR>
'''
# }}}

# vim: fdm=marker
