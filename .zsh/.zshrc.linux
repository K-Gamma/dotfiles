# When OS type is Linux:
# This file is sourced only for interactive shells.
# It should contain commands to set up aliases, fun
# -ctions, options, key bindings, etc:
# See /usr/share/zsh/help

# Compile '.zshrc' to speed up loading. {{{
if [ ! -f $ZDOTDIR/.zshrc.zwc -o $(readlink $ZDOTDIR/.zshrc.linux) -nt $ZDOTDIR/.zshrc.zwc ]; then
    zcompile $ZDOTDIR/.zshrc.zwc $ZDOTDIR/.zshrc.linux
fi
#}}}

# Build-in Function Settings {{{
# TODO: adjustment
# + Autoload {{{
autoload -Uz colors && colors
autoload -Uz is-at-least
if is-at-least 4.3.10; then
    autoload -Uz vcs_info
    autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
fi

# Can execute man with the Esc-h
if (( ${+aliases[run-help]} )); then
    unalias run-help
fi
autoload -Uz run-help
autoload -Uz run-help-git
autoload -Uz run-help-svn
# + }}}

# + Options {{{
# ++ Changing Directories {{{
# Omit cd.
setopt auto_cd

# Add cd directory to directories stack.
# For example, 'cd - [tab]' allows you to jump to a directories in the past.
setopt auto_pushd

# Omit '~'.
setopt cdable_vars

# Don't puhf the same directory onto the directories stack.
setopt pushd_ignore_dups
# ++ }}}

# ++ Completion {{{
# Don't change the position of prompt when completing.
setopt always_last_prompt

# Move the cursor to the end after complete completion.
setopt always_to_end

# Automatically list choices on an ambiguous completion.
setopt auto_list

# Toggle completion candidate by tab.
setopt auto_menu

# Complement variable name and correspondence of parentheses.
setopt auto_param_keys

# If a parameter is completed whose content is the name of a directory, then add a trailing slash instead of a space.
setopt auto_param_slash

# Remove slash added a trailing by auto_param_slash.
setopt auto_remove_slash

# Expand aliases and complement it.
setopt complete_aliases

# Complement even if the cursor is in the middle of word.
unsetopt complete_in_word

# Don't beep on an ambiguous completion.
unsetopt list_beep

# Try to make the completion list smaller.
setopt list_packed

# Show the type of each file with a trailing identifying mark.
setopt list_types

# If can completion the continuation of a word, it isn't accepted yet.
unsetopt rec_exact
# ++ }}}

# ++ Expansion and Globbing {{{
# For example, Can make folders 1, 2, 3 by 'mkdir {1-3}'.
setopt brace_ccl

# Use additional characters for globs.
setopt extended_glob

# Don't require a leading '.' in a filename to be matched explicit.
setopt glob_dots

# Substitutions using the :s and :& history modifiers are performed with pattern matching instead of string matching.
setopt hist_subst_pattern

# Allows the completion after '=' in the option.
setopt magic_equal_subst

# If directory matches by expanding file name, appends / to the end.
setopt mark_dirs

# Suppress glob warning.
unsetopt nomatch

# Expand arrays included in expansion separately.
setopt rc_expand_param
# ++ }}}

# ++ History {{{
# Save each command’s beginning timestamp and the duration to the history file
setopt extended_history

# if conflict occurred, delete the old one.
setopt hist_ignore_all_dups

# Erase extra blanks.
setopt hist_ignore_dups

# If there is a space at the beginning, don't record history.
setopt hist_ignore_space

# Remove the history command from the history list when invoked.
setopt hist_no_store

# Stuff the extra spaces and record.
setopt hist_reduce_blanks

# Don't share the history among zsh's started at the same time.
unsetopt share_history
# ++ }}}

# ++ Input/Output {{{
# Expand aliases.
setopt aliases

# Don't overwrite with redirect.
setopt clobber

# Try to correct the spelling of commands.
setopt correct

# Try to correct the spelling of all arguments in a line.
setopt correct_all

# Don't use 'C-q' and 'C-s'.
setopt no_flow_control

# Do not exit on end-of-file.
setopt ignore_eof

# Print a warning message if a mail file has been accessed since the shell last checked.
setopt mail_warning

# Perform a path search even on command names with slashes in them.
setopt path_dirs

# Japanese file name can be displayed.
setopt print_eight_bit

# If querying the user before executing 'rm *' or 'rm path/*', first wait ten seconds and ignore anything typed in that time.
setopt RM_STAR_WAIT
# ++ }}}

# ++ Job Control {{{
# If you enter a command with the same name as the suspended process, execute it.
setopt auto_resume

# List jobs in the long format by default.
setopt long_list_jobs
# ++ }}}

# ++ Prompting {{{
# Even if there isn't line feed code at the end of the output string, it is displayed.
unsetopt prompt_cr

# Evaluate PROMPT variable expansion, command substitution, arithmetic operation etc for each display.
setopt prompt_subst

# Delete the right prompt after executing the command.
setopt transient_rprompt
# ++ }}}

# ++ Scripts and Functions {{{
# Handle to multiple redirects and pipes.
setopt multios
# ++ }}}

# ++ Zsh Line Editor {{{
# Don't sound a beep.
unsetopt beep

# Emacs like key bind.
setopt emacs

# Use ZLE.
setopt zle
# ++ }}}
# + }}}

# TODO: adjustment
# + Typeset {{{
# An array to note missing features to ease diagnosis in case of problems
typeset -ga debian_missing_features

# Avoid duplication of $PATH
typeset -U path PATH
# + }}}

# TODO: adjustment
# + Zstyle (The zsh/zutil Module Settings) {{{
# ++ Prompt Settings {{{
# +++ PROMPT Setting {{{
function triangle-mark {
    echo '\ue0b0 '
    return 0
}
PROMPT="%K{254}%F{025}%n@%m%K{238}%F{254}$(triangle-mark)%K{238}%F{007}%~%k%F{238}$(triangle-mark)%f"
# +++ }}}

PROMPT2="%F{green}%_> %f"
SPROMPT="%F{red}correct: %R -> %r [nyae]? %f"

# +++ RPROMPT Setting {{{
function branch-mark {
    echo '\ue0a0 '
    return 0
}
if is-at-least 4.3.10; then
    # ++++ Use vcs_info {{{
    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' formats "%F{green}%c%u$(branch-mark)[%b]%f"
    if is-at-least 4.3.10; then
        zstyle ':vcs_info:git:*' check-for-changes true
        zstyle ':vcs_info:git:*' stagedstr "%F{yellow}"
        zstyle ':vcs_info:git:*' unstagedstr "%F{red}"
        zstyle ':vcs_info:git:*' actionformats '%F{magenta}[%b|%a]%f'
    fi
    precmd() { vcs_info }
    RPROMPT='${vcs_info_msg_0_}'
    # ++++ }}}
else
    # ++++ Don't use vcs_info {{{
    function get-branch-status {
        local res color
        output=$(git status --short 2> /dev/null)
        if [ -z "$output" ]; then
            res=':' # status Clean
            color='%F{green}'
        elif [[ $output =~ "[\n]?\?\? " ]]; then
            res='?:' # Untracked
            color='%F{yellow}'
        elif [[ $output =~ "[\n]? M " ]]; then
            res='M:' # Modified
            color='%F{red}'
        else
            res='A:' # Added to commit
            color='%F{cyan}'
        fi
        echo ${color}
        return 0
    }
    function get-branch-name {
        echo $(git rev-parse --abbrev-ref HEAD 2> /dev/null)
        return 0
    }
    function branch-status-check {
        if [[ "$PWD" =~ '/\.git(/.*)?$' ]]; then
            return 0
        fi
        local branchname=$(get-branch-name)
        if [[ -z $branchname ]]; then
            return 0
        fi
        echo "$(get-branch-status)$(branch-mark)[${branchname}]%f"
        return 0
    }
    RPROMPT='$(branch-status-check)'
    # ++++ }}}
fi
# +++ }}}
# ++ }}}

# ++ 'cdr' settings (Required before 'zplug load') {{{
if [ ! -d ${XDG_CACHE_HOME:-$HOME/.cache}/shell ]; then
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/shell"
fi
if is-at-least 4.3.10; then
    add-zsh-hook chpwd chpwd_recent_dirs
    zstyle ':chpwd:*' recent-dirs-max 500
    zstyle ":chpwd:*" recent-dirs-default true
    zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME:-$HOME/.cache}/shell/chpwd-recent-dirs"
    zstyle ':chpwd:*' recent-dirs-pushd true
fi
# ++ }}}

# TODO: English commentary
# ++ Completion Settings {{{
# 補完侯補をメニューから選択
# select=2: 補完候補を一覧から選択, 補完候補が2つ以上なければすぐに補完
zstyle ':completion:*' menu select=2

# 補完時に, 文字の大小を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# 補完候補に着色
if [ -n "$LS_COLORS" ]; then
    zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
fi

# カレントディレクトリを非表示
zstyle ':completion:*:cd:*' ignore-parents parent pwd

# オブジェクトファイルとか中間ファイルとか非表示
zstyle ':completion:*:*files' ignored-patterns '*?.o' '*?~' '*\#'

# sudo でも補完の対象
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
    /usr/local/bin  \
    /usr/sbin       \
    /usr/bin        \
    /sbin           \
    /bin            \
    /usr/X11R6/bin

# 補完候補をキャッシュ
zstyle ':completion:*' use-cache true
zstyle ':completion:*' cache-path "${XDG_CACHE_HOME:-$HOME/.cache}/shell/completion-cache-dirs"

# 詳細情報を非表示
zstyle ':completion:*' verbose no

# 補完フォーマット
zstyle ':completion:*:descriptions' format '%BCompleting%b %U%d%u'

# セパレータ
zstyle ':completion:*' list-separator '-->'
# ++ }}}
# + }}}

# TODO: addition
# + Aliases {{{
# global
alias -g ...='cd ../..'
alias -g ....='cd ../../..'
alias -g .....='cd ../../../..'
alias -g @g='| grep'
alias -g @l='| less'
alias -g @h='| head'
alias -g @t='| tail'
alias -g @s='| sed'
alias -g @c='| cat'

# suffix
alias -s py=python
alias -s hs=runhaskell
alias -s {png,jpg,bmp,PNG,JPG,BMP}=eog
alias -s {mp3,frac}=audacious
alias -s {html,htm,md}=firefox
function extract() {
    case $1 in
        *.tar.gz|*.tgz) tar xzvf $1;;
        *.tar.xz) tar Jxvf $1;;
        *.zip) unzip $1;;
        *.lzh) lha e $1;;
        *.tar.bz2|*.tbz) tar xjvf $1;;
        *.tar.Z) tar zxvf $1;;
        *.gz) gzip -d $1;;
        *.bz2) bzip2 -dc $1;;
        *.Z) uncompress $1;;
        *.tar) tar xvf $1;;
        *.arj) unarj $1;;
    esac
    return 0
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz}=extract

# Don't write to history
alias run-help=' run-help'
alias man=' man'

# Enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    case "${OSTYPE}" in
        darwin*)
            alias ls='ls -GF'
            ;;
        linux*)
            if [ -f ~/.dircolors ]; then
                eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
            fi
            alias ls='ls -F --color=auto'
            alias dir='dir --color=auto'
            alias vdir='vdir --color=auto'
            alias grep='grep --color=auto'
            alias fgrep='fgrep --color=auto'
            alias egrep='egrep --color=auto'
            ;;
    esac
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias lh='ls -lh'
alias l='ls -CF'

# rm aliases
alias rm='rm -i -v'
alias del='rm -rf'

# other aliases
alias df='df -h'
alias ps='ps --sort=start_time'
alias apv='appletviewer'
alias x='exit'
alias g='git'
alias v='vim'
alias relogin='exec $SHELL -l'
alias color256='for c in {000..255}; do echo -n "\e[38;5;${c}m $c" ; [ $(($c%16)) -eq 15 ] && echo;done;echo'
alias color256bg='for c in {000..255}; do echo -en " \e[48;5;${c}m$c\e[0m" ; [ $(($c%16)) -eq 15 ] && echo;done;echo'

# GoogleDrive aliases
alias gdrive_m='google-drive-ocamlfuse ~/googledrive'
alias gdrive_u='fusermount -u ~/googledrive'

# cputmp alias
alias cputmp='echo $(echo $(cat /sys/class/thermal/thermal_zone0/temp) / 1000 | bc) °C'

# gputmp alias
alias gputmp='echo $(nvidia-settings -tq "[gpu:0]/GPUCoreTemp") °C'

# latexmk aliases
alias lmk='latexmk'
alias lmkp='latexmk -pv'
alias lmkc='latexmk -c'

# apt update & upgrade & autoremove alias
alias sudo_update='sudo apt update && sudo apt -y upgrade && sudo apt -y autoremove'
# + }}}

# + Named Directories {{{
function name_dir()
{
    local dir=$1
    local name=$2

    if [ -d $dir ]; then
        hash -d $name=$dir
        return 0
    else
        return 1
    fi
    return 0
}

name_dir ~/.dotfiles/ dotfiles
name_dir ~/workspace/ workspace
name_dir ~/.zsh/ .zsh
name_dir ~/.vim/ .vim
# + }}}

# TODO: addition
# + Keybind {{{
# Emacs like keybind
bindkey -e

# History search
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward
if is-at-least 4.3.10; then
    bindkey '^R' history-incremental-pattern-search-backward
    bindkey '^S' history-incremental-pattern-search-forward
fi
# + }}}
# }}}

# Plugin Settings {{{
# + Plugin Install {{{
# Install zplug/zplug
if [ ! -f $ZPLUG_HOME/init.zsh ]; then
    mkdir -p $ZPLUG_HOME
    git clone https://github.com/zplug/zplug $ZPLUG_HOME
fi
source $ZPLUG_HOME/init.zsh

# Install zsh's other plugin
zplug 'zplug/zplug', hook-build:'zplug --self-manage'
zplug 'zsh-users/zsh-completions'
zplug 'zsh-users/zsh-autosuggestions'
zplug 'supercrabtree/k'
zplug 'zsh-users/zaw'
zplug 'joel-porquet/zsh-dircolors-solarized'
zplug 'zsh-users/zsh-syntax-highlighting', defer:2

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Source plugins and add commands to $PATH
zplug load
# + }}}

# TODO: addition
# + Plugin Settings{{{
# ++ zplug/zplug
# ++ zsh-users/zsh-completions
# ++ zsh-users/zsh-autosuggestions
# ++ supercrabtree/k

# ++ zsh-users/zaw {{{
if zplug check 'zsh-users/zaw';then
    bindkey '\C-d' zaw-cdr
    bindkey '\C-g' zaw-git-branches
    bindkey '\C-@' zaw-gitdir

    function zaw-src-gitdir () {
        _dir=$(git rev-parse --show-cdup 2>/dev/null)
        if [ $? -eq 0 ]
        then
            candidates=( $(git ls-files ${_dir} | perl -MFile::Basename -nle \
                '$a{dirname $_}++; END{delete $a{"."}; print for sort keys %a}') )
        fi
        actions=("zaw-src-gitdir-cd")
        act_descriptions=("change directory in git repos")
        return 0
    }

    function zaw-src-gitdir-cd () {
        BUFFER="cd $1"
        zle accept-line
        return 0
    }
    zaw-register-src -n gitdir zaw-src-gitdir
fi
# ++ }}}

# ++ joel-porquet/zsh-dircolors-solarized {{{
if zplug check 'joel-porquet/zsh-dircolors-solarized';then
    setupsolarized dircolors.ansi-light
fi
# ++ }}}

# ++ zsh-users/zsh-syntax-highlighting

# + }}}
# }}}

# Settings for zprof
#if (which zprof > /dev/null 2>&1) ;then
#  zprof
#fi


# vim: foldmethod=marker
# vim: foldcolumn=3
# vim: foldlevel=0
