" Initialize {{{
" Don't load when -eval(vim-tiny, vim-small)
if 0 | endif
" Turn off vi compatible mode
if &compatible | set compatible! | endif

" + Encoding {{{
" Required:
set encoding=UTF-8                              " Set encode to utf-8.
scriptencoding utf-8                            " Set character code of Vim script file.(you can use multibyte)
set fileencoding=utf-8                          " 保存時の文字コード
set fileencodings=ucs-boms,utf-8,euc-jp,cp932   " 読み込み時の文字コードの自動判別. 左側が優先される
set fileformats=unix,dos,mac                    " 改行コードの自動判別. 左側が優先される
set ambiwidth=double                            " □や○文字が崩れる問題を解決
" + }}}

" + Syntax {{{
" Required:
syntax enable
" + }}}

" + Filetype {{{
" Required:
filetype off    "最後にonにする
filetype plugin indent off
" + }}}

" + Autocmd {{{
" Required:
augroup MyAutoCmd
    autocmd!
augroup END
" + }}}

" + Use Python3 {{{
"if has('python3')
"endif
" + }}}


" }}}

" デフォルト機能設定 {{{
" + ファイル {{{
set hidden                      " ファイル変更中でも他のファイルを開けるようにする
set autoread                    " ファイル内容が変更されると自動読み込みする
set browsedir=buffer            " ファイル保存ダイアログの初期ディレクトリをバッファファイル位置に指定する
set nobackup                    " バックアップしない
"set backupdir=~/.vim/backup    " バックアップディレクトリを指定する
set directory=~/.vim/swp        " スワップファイルディレクトリを指定する
augroup swapchoice-readonly     " スワップファイルを読み込み専用で開く
    autocmd!
    autocmd SwapExists * let v:swapchoice = 'o'
augroup END
" + }}}

" + 表示 {{{
set display=lastline            " @で省略せず, 全て表示
set number                      " 行番号を表示する
set modeline                    " モードラインを有効にする
set modelines=1                 " モードライン行数を設定
set list                        " 不可視文字を表示する
set listchars=tab:»-,trail:.,extends:»,precedes:«,nbsp:% ",eol:↲
augroup highlightZenkakuSpace   " 全角スペースを赤色にする
    autocmd!
    autocmd VimEnter,ColorScheme * highlight ZenkakuSpace term=underline ctermbg=Red guibg=Red
    autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
augroup END
if (v:version == 704 && has("patch785")) || v:version >= 705
      set breakindent           " インデントを考慮した行の折り返し
endif
set cursorline                  " カーソル行をハイライト
set cursorline                  " カーソル行をハイライト
augroup cch                     " カレントウィンドウにのみ罫線を引く
    autocmd! cch
    autocmd WinLeave * set nocursorline
    autocmd WinEnter,BufRead * set cursorline
augroup END
highlight clear CursorLine
highlight CursorLine gui=underline
highlight CursorLine ctermbg=black guibg=black
" + }}}

" + 入力 {{{
set cindent                         " 詳細は-> ':help cinoptions-values'
set cinoptions+=:0,l1,g0
set smarttab
set expandtab                       " タブの代わりにスペースを使う
let _curfile=expand("%:r")          " Makefile 編集時は無効
if _curfile == 'Makefile'
    set noexpandtab
endif
set tabstop=4                       " タブの幅
set shiftwidth=4                    " 自動インデントの幅
set softtabstop=0                   " タブを押した時のスペースの量（0ならtabstopの量）
set backspace=indent,eol,start      " バックスペースを押した時の挙動
set whichwrap=b,s,h,l,<,>,[,]       " カーソルを行頭、行末で止まらないようにする
set clipboard=unnamed,autoselect    " ヤンクをクリップボードにコピーする
set showmatch                       " 括弧の対応を表示する（対となる括弧に一瞬飛ぶ）
set matchtime=1                     " 括弧の対応を表示する時間
set completeopt=menuone             " 補完候補が1つでも表示
set pumheight=10                    " 補完メニューの高さ
set wildmenu                        " 入力コマンドの補完
set wildmode=longest:full,full      " 入力コマンドの補完オプション
set history=1000                    " 入力コマンドの履歴数

" ++ マウス {{{
if has('mouse')
    set mouse=a
    if has('mouse_sgr')
        set ttymouse=sgr
    elseif v:version > 703 || v:version is 703 && has('patch632')
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    endif
endif
" ++ }}}

" ++ クリップボード {{{
if &term =~ "xterm"
    let &t_SI .= "\e[?2004h"
    let &t_EI .= "\e[?2004l"
    let &pastetoggle = "\e[201~"

    function XTermPasteBegin(ret)
        set paste
        return a:ret
    endfunction

    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif
" ++ }}}
" + }}}

" + 検索 "{{{
set noincsearch " インクリメンタルサーチを行わない
set hlsearch    " 検索結果をハイライトする
set ignorecase  " 検索時に文字の大小を区別しない
set smartcase   " 検索時に大文字を含んでいたら大小を区別する
set nowrapscan  " 検索をファイルの先頭へループしない
" + }}}

" + キーマッピング "{{{
"-----------------------------------------------------------------------------------------------"
"     command     |  normal  | insert |  command line  | visual | select | waiting computation |
" map  / noremap  |    @     |        |                |   @    |   @    |          @          |
" nmap / nnoremap |    @     |        |                |        |        |                     |
" vmap / vnoremap |          |        |                |   @    |   @    |                     |
" omap / onoremap |          |        |                |        |        |          @          |
" xmap / xnoremap |          |        |                |   @    |        |                     |
" smap / snoremap |          |        |                |        |   @    |                     |
" map! / noremap! |          |   @    |       @        |        |        |                     |
" imap / inoremap |          |   @    |                |        |        |                     |
" cmap / cnoremap |          |        |       @        |        |        |                     |
"-----------------------------------------------------------------------------------------------"

" ++ ノーマルモード "{{{
" 保存/終了をスペースで
nnoremap <Space>w  :w<CR>
nnoremap <Space>q  :q<CR>
nnoremap <Space>Q  :q!<CR>

" カーソルを表示行で移動する
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
nnoremap <Down> gj
nnoremap <Up>   gk

" 行末までのヤンクにする
nnoremap Y y$

" インデント
nnoremap <silent> == gg=G''

" CTRL-hjklでウィンドウ移動
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

" バッファの移動
nnoremap <C-p> :bp<CR>
nnoremap <C-n> :bn<CR>

" 行頭までカーソル移動
noremap <S-h> ^

" 行末までカーソル移動
noremap <S-l> $

" インクリメント
nnoremap + <C-a>
" デクリメント
nnoremap - <C-x>

" Escの2回押しでハイライト消去
nnoremap <ESC><ESC> :nohlsearch<CR><ESC> 

" 保存して閉じる, 保存せず閉じるを無効
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

" EXモード無効
nnoremap Q <Nop>
" 
" ++ }}}

" ++ インサートモード "{{{
" 挿入モード中に'Ctr-*'でコマンドモードでの移動を可能にする
"カーソルを上へ
"カーソルを右へ
inoremap <C-l> <right>
"カーソルを左へ
inoremap <C-h> <left>
" ++ }}}
" + }}}
" }}}

" Finalize "{{{
" + Filetype "{{{
" Required:
filetype on
filetype plugin indent on 
" + }}}
" }}}

" vim: fdm=marker fdc=3 fdl=0
